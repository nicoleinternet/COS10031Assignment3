///////////////////////////////////////////////////////////////
// COS10031 - Computer Technology | Assessment 3
// Vandy Aum, Marcus Mifsud, Nicole Reichert, Luke Byrnes
//  ___  ___          _                      _           _ 
//  |  \/  |         | |                    (_)         | |
//  | .  . | __ _ ___| |_ ___ _ __ _ __ ___  _ _ __   __| |
//  | |\/| |/ _` / __| __/ _ \ '__| '_ ` _ \| | '_ \ / _` |
//  | |  | | (_| \__ \ ||  __/ |  | | | | | | | | | | (_| |
//  \_|  |_/\__,_|___/\__\___|_|  |_| |_| |_|_|_| |_|\__,_|                                                  
//
// Register Assignations
    // R0, (Compare Code of Correct Pos/Col)
    // R1, (Compare Code of (Correct Pos, Incorrect Col))
    // R2, Codebreaker
    // R3, Codebreaker
    // R4, Codemaker
    // R5, Codemaker
    // R10 Message Register
    // R9 code address
    // R8 Word counter
    // R11 Guess Limit
    // R12 Secret Code
///////////////////////////////////////////////////////////////
// Stage 1 - Game Setup - Luke Byrnes
//
// Prompt and store Codemaker Name
    // Set whoIsCodeMaker Query prompt to R10
    MOV R10, #whoIsCodeMaker
    // print whoIsCodeMaker Query from R10
    STR R10, .WriteString
    // Set codeMaker value to R4
    MOV R4, #codeMaker
    // Take input from user and store to R4
    STR R4, .ReadString
    // Print codeMaker value from R4
    STR R4, .WriteString
//
// Prompt and store CodeBreaker Name
    // Set whoIsCodeMaker Query prompt to R10
    MOV R10, #whoIsCodeBreaker
    // print whoIsCodeMaker Query from R4
    STR R10, .WriteString
    // Set codeMaker value to R5
    MOV R5, #codeBreaker
    // Take input from user and store to R5
    STR R5, .ReadString
    // Print codeMaker value from R5
    STR R5, .WriteString
//
// Prompt and store GuessLimit for the session
    // Set guessLimit Query prompt to R10
    MOV R10, #whatIsGuessLimit
    // Print whatIsGuessLimit from R10
    STR R10, .WriteString
    // Take input from user and store to R11
    LDR R11, .InputNum
    // Print guessLimit from R11
    STR R11, .WriteSignedNum
    // Stop Program.
    // HALT
//
///////////////////////////////////////////////////////////////
// Stage 2 - A Code Entry Function
//Creating the get code
    MOV R10, #promptRule
    STR R10, .WriteString
    MOV R10, #colorChoice
    STR R10, .WriteString
    STR R4, .WriteString
    MOV R10, #gettingCode
    STR R10, .WriteString
    b getcode
code:
    MOV R10, #message
    STR R10, .WriteString
    HALT
// Program functions:
//secret code function
getcode:
    MOV R12, #myCode
    STR R12, .ReadString
//This is storing number 0 in the R8
//This is storing the address of R12 content (input) to R9
firstLetter: LDRB R9, [R12]
//The CMP is for checking to see if the input is 4 character and the way this CMP is used it is going to check for 4 char no more and no less
//For this CMP check to see if any code has been entered
    CMP R9, #0
    BEQ getcode
    STR R9, .WriteChar
    CMP R9, #0x72     //check if the character is r(red)
    BEQ secondLetter
    CMP R9, #0x67     //check if the character is g(green)
    BEQ secondLetter
    CMP R9, #0x62     //check if the character is b(blue)
    BEQ secondLetter
    CMP R9, #0x79     //check if the character is y(yellow)
    BEQ secondLetter
    CMP R9, #0x70     //check if the character is p(purple)
    BEQ secondLetter
    CMP R9, #0x63     //check if the character is c(cyan)
    BEQ secondLetter
    b notOption
secondLetter: LDRB R9, [R12, #1] //one character is one byte so when adding one byte to R12 it will be the address of the next character
//This CMP is checking if there is a second character, it would also mean that only 1 char has been entered so it will loop back to the input
    CMP R9, #0
    BEQ getcode
    STR R9, .WriteChar
    CMP R9, #0x72     //check if the character is r(red)
    BEQ thirdLetter
    CMP R9, #0x67     //check if the character is g(green)
    BEQ thirdLetter
    CMP R9, #0x62     //check if the character is b(blue)
    BEQ thirdLetter
    CMP R9, #0x79     //check if the character is y(yellow)
    BEQ thirdLetter
    CMP R9, #0x70     //check if the character is p(purple)
    BEQ thirdLetter
    CMP R9, #0x63     //check if the character is c(cyan)
    BEQ thirdLetter
    b notOption
thirdLetter: LDRB R9, [R12, #2]
//This CMP is checking for the third character, it would also mean that only 2 char has been entered so it will loop back to the input
    CMP R9, #0
    BEQ getcode
    STR R9, .WriteChar
    CMP R9, #0x72     //check if the character is r(red)
    BEQ fourthLetter
    CMP R9, #0x67     //check if the character is g(green)
    BEQ fourthLetter
    CMP R9, #0x62     //check if the character is b(blue)
    BEQ fourthLetter
    CMP R9, #0x79     //check if the character is y(yellow)
    BEQ fourthLetter
    CMP R9, #0x70     //check if the character is p(purple)
    BEQ fourthLetter
    CMP R9, #0x63     //check if the character is c(cyan)
    BEQ fourthLetter
    b notOption
fourthLetter: LDRB R9, [R12, #3]
//This CMP would check for the fourth char, it would also mean that only 3 char has been entered so it will loop back to the input and if 
//fourth char exist it would continue the program meaning that 4 char has been enterd
    CMP R9, #0
    BEQ getcode
    STR R9, .WriteChar
    CMP R9, #0x72     //check if the character is r(red)
    BEQ fifthLetter
    CMP R9, #0x67     //check if the character is g(green)
    BEQ fifthLetter
    CMP R9, #0x62     //check if the character is b(blue)
    BEQ fifthLetter
    CMP R9, #0x79     //check if the character is y(yellow)
    BEQ fifthLetter
    CMP R9, #0x70     //check if the character is p(purple)
    BEQ fifthLetter
    CMP R9, #0x63     //check if the character is c(cyan)
    BEQ fifthLetter
    b notOption
fifthLetter: LDRB R9, [R12, #4] //This is only used to check if the input is over 4 char
    STR R9, .WriteChar
    CMP R9, #0
    BNE overLimit
    b code
notOption: 
    MOV R10, #errormessage1
    STR R10, .WriteString
    b getcode
overLimit:
    MOV R10, #errormessage2
    STR R10, .WriteString
    b getcode
///////////////////////////////////////////////////////////////
//
// Display whoIsCodeMaker Query prompt:
whoIsCodeMaker: .ASCIZ "Codemaker is: "
// Store block of memory of 128 bytes to store the string
codeMaker: .BLOCK 128
// Display whoIsCodeMaker Query prompt:
whoIsCodeBreaker: .ASCIZ "\nCodebreaker is: "
// Store block of memory of 128 bytes to store the string
codeBreaker: .BLOCK 128
// Display guessLimit Query prompt:
whatIsGuessLimit: .ASCIZ "\nGuess Limit: "
//Display the prompt for user to input the secret code
gettingCode: .ASCIZ " enter the Code: "
promptRule: .ASCIZ "\nType in 4 color for the secret code"
colorChoice: .ASCIZ "\n(r-RED, g-GREEN, b-BLUE, y-YELLOW, p-PURPLE, c-CYAN)\n"
myCode: .BLOCK 128
errormessage1: .ASCIZ "\nOne of the character you have entered is not within the option given!!!\n"
errormessage2: .ASCIZ "\nToo many character!!!\n"
message: .ASCIZ "\ntesting"